class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        int finalCount = n / 2;
        int res = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();

        for (int i = 0; i < n; i++) {

            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);

        }

        for (Map.Entry<Integer, Integer> it : map.entrySet()) {
            if (it.getValue() > (n / 2)) {
                return it.getKey();
            }
        }
        return -1;

        /// The Boyer-Moore Voting Algorithm
        int count = 0;
        int curr = 0;

        for (int i = 0; i < n; i++) {

            if (count == 0) {
                curr = nums[i];
                count = 1;
            }

            else if (curr == nums[i]) {
                count++;
            } else
                count--;
        }

        // check if majority
        int cnt1 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == curr)
                cnt1++;
        }

        if (cnt1 >= finalCount) {
            return curr;
        } else
            return -1;
    }
}
