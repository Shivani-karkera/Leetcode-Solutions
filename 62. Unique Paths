class Solution {
    public int uniquePaths(int m, int n) {

        //nCr
        double paths=1;
        int N=n+m-2;
        int r=n-1;
        for(int i=1;i<=r;i++){
        paths=paths*(N-r+i)/i;
        }
        return (int)paths;


//DP
        int[][] dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return uniquePathss(0, 0, m, n, dp);

    }

    public int uniquePathss(int i, int j, int m, int n, int[][] dp) {
        if (i >= m || j >= n)
            return 0;
        if (i == m - 1 && j == n - 1)
            return 1;
        if (dp[i][j] != -1)
            return dp[i][j];
        else
            return dp[i][j] = uniquePathss(i + 1, j, m, n, dp) + uniquePathss(i, j + 1, m, n, dp);

    }
}
