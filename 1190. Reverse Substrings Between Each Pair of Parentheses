import java.util.Vector;

class Solution {
    public String reverseParentheses(String s) {
        int length = s.length();
        StringBuilder res = new StringBuilder();
        Stack<Integer> stack = new Stack();
        char[] sub = s.toCharArray();
        int v[] = new int[length];

        //////////// WormHole approach
        for (int i = 0; i < length; i++) {
            if (sub[i] == ')') {
                int oppIndex = stack.pop();
                v[i] = oppIndex;
                v[oppIndex] = i;

            }

            if (sub[i] == '(') {
                stack.push(i);
            }

        }

        int dir = 1;
        for (int i = 0; i < length; i += dir) {
            if (sub[i] == ')' || sub[i] == '(') {
                i = v[i];
                dir *= -1;
            } else
                res.append(sub[i]);
        }

        return res.toString();

        ///////////// normal approach o(n^2)
        for (char c : s.toCharArray()) {

            if (!stack.isEmpty() && c == ')') {
                StringBuilder sub = new StringBuilder();
                while (stack.peek() != '(') {
                    sub.append(stack.pop());
                }
                if (stack.peek() == '(') {
                    stack.pop();
                }

                for (char ele : sub.toString().toCharArray())
                    stack.push(ele);
            } else
                stack.push(c);
        }

        while (!stack.isEmpty()) {
            res.append(stack.pop());
        }
        return res.reverse().toString();

    }

}
