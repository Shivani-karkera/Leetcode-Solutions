/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    List<TreeNode> res = new ArrayList<TreeNode>();
    Set<Integer> delete = new HashSet<Integer>();

    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {

        for (int i : to_delete) {
            delete.add(i);
        }
        root = preorder(root, true);
        return res;
    }

    public TreeNode preorder(TreeNode node, boolean isRoot) {
        if (node == null)
            return null;
        boolean deleted = delete.contains(node.val);
        if (isRoot && !deleted)
            res.add(node);
        node.left = preorder(node.left, deleted);
        node.right = preorder(node.right, deleted);
        return deleted ? null : node;

    }
}
